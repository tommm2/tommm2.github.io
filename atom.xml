<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tommm2的前端筆記</title>
  
  <subtitle>只要路是對的，就不怕路遠</subtitle>
  <link href="http://tommm2.github.io/atom.xml" rel="self"/>
  
  <link href="http://tommm2.github.io/"/>
  <updated>2021-10-08T10:17:08.831Z</updated>
  <id>http://tommm2.github.io/</id>
  
  <author>
    <name>tommm2</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript核心(10)-運算子、優先性與相依性</title>
    <link href="http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(10)-%E9%81%8B%E7%AE%97%E5%AD%90%E3%80%81%E5%84%AA%E5%85%88%E6%80%A7%E8%88%87%E7%9B%B8%E4%BE%9D%E6%80%A7.html"/>
    <id>http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(10)-%E9%81%8B%E7%AE%97%E5%AD%90%E3%80%81%E5%84%AA%E5%85%88%E6%80%A7%E8%88%87%E7%9B%B8%E4%BE%9D%E6%80%A7.html</id>
    <published>2021-10-08T09:38:07.000Z</published>
    <updated>2021-10-08T10:17:08.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="運算子"><a href="#運算子" class="headerlink" title="運算子"></a>運算子</h2><p>JavaScript 具有二元運算子及一元運算子，以及比較特別的(條件)三元運算子。</p><h3 id="一元運算子"><a href="#一元運算子" class="headerlink" title="一元運算子"></a>一元運算子</h3><p>具備一個運算元，一個運算子</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">運算子 運算元運算元 運算子　　　<span class="token comment">// 例如: x++ 或 ++x　或 typeof x 、 delete x</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="二元運算子"><a href="#二元運算子" class="headerlink" title="二元運算子"></a>二元運算子</h3><p>具備兩個運算元，一個在前，一個在後</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">運算元<span class="token number">1</span> 運算子 運算元<span class="token number">2</span>  <span class="token comment">// 例如 1 + 1 或 a * b</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="三元運算子"><a href="#三元運算子" class="headerlink" title="三元運算子"></a>三元運算子</h3><p>具備一個條件式、兩個表達式。條件後會跟著一個問號，如果條件是 <code>true</code>，冒號前的表達式會被執行，否則執行冒號後的表達式</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">condition <span class="token operator">?</span> express1 <span class="token operator">:</span> express2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看看以下範例：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> bmi <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>bmi <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'偏瘦'</span> <span class="token operator">:</span> <span class="token string">'有點肉'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment">// 回傳肉肉的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果 <code>bmi &lt; 20</code> 是 <code>true</code>，就顯示偏瘦，否則就顯示有點肉，並且會回傳一個結果。</p><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">TIP</p><p>三元運算子可以在條件式裡面再包一個條件式，就像 if 裡面 再包一個 if ，如下範例：</p></div><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> bmi <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>bmi <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment">// bmi 小於 20 就進入下一個三元運算子，下面就以此類推</span><span class="token operator">?</span> <span class="token punctuation">(</span>bmi <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'超級瘦'</span> <span class="token operator">:</span> <span class="token string">'普通瘦'</span>  <span class="token operator">:</span> <span class="token string">'有點肉'</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 執行結果: 超級瘦</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="運算子優先性及相依性"><a href="#運算子優先性及相依性" class="headerlink" title="運算子優先性及相依性"></a>運算子優先性及相依性</h2><h3 id="Precedence-優先性"><a href="#Precedence-優先性" class="headerlink" title="Precedence 優先性"></a>Precedence 優先性</h3><p>運算子優先序( Operator precedence )決定了運算子彼此間被語法解析的方式，優先序高的運算子會成為優先序低的運算元，看看以下範例：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 執行結果: 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>結果為甚麼是 8 而不是 12 呢 ? 請看下面的優先性表格，數字越高優先性越高：</p><table><thead><tr><th align="center">優先性</th><th align="center">相依性</th><th align="center">運算子</th></tr></thead><tbody><tr><td align="center">15</td><td align="center">從右至左</td><td align="center">…**…</td></tr><tr><td align="center">14</td><td align="center">從左至右</td><td align="center">…*…</td></tr><tr><td align="center">14</td><td align="center">從左至右</td><td align="center">…/…</td></tr><tr><td align="center">14</td><td align="center">從左至右</td><td align="center">…%…</td></tr><tr><td align="center">13</td><td align="center">從右至左</td><td align="center">…+…</td></tr><tr><td align="center">13</td><td align="center">從右至左</td><td align="center">…-…</td></tr></tbody></table><p><code>*</code> 的優先性是 <code>14</code>，而 <code>+</code> 是 <code>13</code>，優先性高的會先運算，運算出來的數值變成優先性低的運算元，也就是 <code>2 ＊ 3</code> 的數值會變成 <code>+</code> 的運算元，之後再賦值到變數 <code>a</code>。</p><h3 id="Associativity-相依性"><a href="#Associativity-相依性" class="headerlink" title="Associativity 相依性"></a>Associativity 相依性</h3><p>優先序相同時，就會使用相依性來決定運算方向，參考以下表格：</p><table><thead><tr><th align="center">優先性</th><th align="center">相依性</th><th align="center">運算子</th></tr></thead><tbody><tr><td align="center">11</td><td align="center">從左至右</td><td align="center">…&lt;…</td></tr><tr><td align="center">11</td><td align="center">從左至右</td><td align="center">…&lt;=…</td></tr><tr><td align="center">11</td><td align="center">從左至右</td><td align="center">…&gt;…</td></tr><tr><td align="center">11</td><td align="center">從左至右</td><td align="center">…&gt;=…</td></tr><tr><td align="center">16</td><td align="center">從右至左</td><td align="center">++…</td></tr><tr><td align="center">17</td><td align="center">無</td><td align="center">…++</td></tr><tr><td align="center">14</td><td align="center">從左至右</td><td align="center">…*…</td></tr></tbody></table><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 範例 1.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token comment">// 範例 2.</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">++</span> <span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token comment">// 2</span><span class="token comment">// 範例3.</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>b <span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;運算子&quot;&gt;&lt;a href=&quot;#運算子&quot; class=&quot;headerlink&quot; title=&quot;運算子&quot;&gt;&lt;/a&gt;運算子&lt;/h2&gt;&lt;p&gt;JavaScript 具有二元運算子及一元運算子，以及比較特別的(條件)三元運算子。&lt;/p&gt;
&lt;h3 id=&quot;一元運算子&quot;&gt;&lt;a h</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://tommm2.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript核心(9)-型別</title>
    <link href="http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(9)-%E5%9E%8B%E5%88%A5.html"/>
    <id>http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(9)-%E5%9E%8B%E5%88%A5.html</id>
    <published>2021-10-08T08:55:55.000Z</published>
    <updated>2021-10-08T09:36:50.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="動態型別"><a href="#動態型別" class="headerlink" title="動態型別"></a>動態型別</h2><p>JavaScript是弱型別，也能說是動態程式語言。也就是說不必像 C 語言一樣特別宣告變數的型別。程式在執行時會自動轉換並確立型別。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>      <span class="token comment">// a 目前是數字</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span> <span class="token comment">// a 目前是字串</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// a 目前是布林值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>JavaScript 在轉換型別當中有非常大的陷阱，我們來看看以下程式碼 :</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token keyword">typeof</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 執行結果: 1 "number"</span>num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token keyword">typeof</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 執行結果 : 1 "string"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 <code>num</code> 印出的第一個結果是 <code>1</code>，然後型別是 <code>number</code>，而第二個印出的結果變成字串的原因是 <code>num</code> 加入了一個空字串，動態轉換了型別，所以 <code>num</code> 會變成字串型別。</p><h2 id="原始型別"><a href="#原始型別" class="headerlink" title="原始型別"></a>原始型別</h2><p>原始型別總共分為七種型別：</p><ul><li>Boolean (布林)</li><li>Null (空值)</li><li>Undefined (未定義)</li><li>Number (數值)</li><li>String (字串)</li><li>BigInt (整數數值)</li><li>Symbol (整數數值)</li></ul><p>這些型別有各自的方法，比如說字串轉大小寫、取得字串長度，或者是數字取絕對值等等，而可以使用這些方法的原因是原始型別具有包裹物件：</p><table><thead><tr><th>型別˙</th><th align="center">包裹物件</th></tr></thead><tbody><tr><td>Boolean</td><td align="center">new Boolean()</td></tr><tr><td>Null</td><td align="center">-</td></tr><tr><td>Undefined</td><td align="center">-</td></tr><tr><td>Number</td><td align="center">new Number()</td></tr><tr><td>String</td><td align="center">new String()</td></tr><tr><td>BigInt</td><td align="center">BigInt()</td></tr><tr><td>Symbol</td><td align="center">Symbol()</td></tr></tbody></table><div class="custom-quote warning"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 8V13"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12 15.99V16.01"></path></svg></span><p class="custom-quote-title">WARNING</p><p>需要注意的是只有 <code>Null</code> 以及 <code>Undefined</code> 沒有包裹物件。</p></div><hr><p>我們可以用 <code>typeof</code> 一一確認變數型別，參考以下範例：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token string">'文字'</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">,</span> <span class="token keyword">typeof</span> b<span class="token punctuation">,</span> <span class="token keyword">typeof</span> c<span class="token punctuation">,</span> <span class="token keyword">typeof</span> d<span class="token punctuation">,</span> <span class="token keyword">typeof</span> e<span class="token punctuation">)</span><span class="token comment">// String, Boolean, Object, Object, undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而為甚麼 <code>null</code> 印出來的型別會是 <code>Object</code> 呢 ? 這是 JavaScript 長久以來的錯誤，但它也沒辦法修正錯誤，因為有許多網站透過這種錯誤來完成網站應用，如果修正可能會導致網站出錯。</p><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">TIP</p><p>可以用 <code>typeof</code> 來檢查一個未宣告的變數，這時會印出 <code>undefined</code>， 這是 <code>typeof</code>  針對 <code>not defined</code> 的保護措施。</p></div><hr><p>接著用以下範例來說明，為甚麼一個字串變數能使用各種操作字串的方法：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'tom'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length<span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// tom, String &#123;"tom"&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>透過開發者工具並且把 <code>String</code> 點開會包含 3 個字串以及 <code>_proto_</code> ，如下圖 ：</p><p><img src="https://i.postimg.cc/0jZLYVRc/image.jpg" alt="https://i.postimg.cc/0jZLYVRc/image.jpg"></p><p><code>_proto_</code> 就是這個包裹物件的原型，方法都藏在裡面。使用原始型別的時候，JavaScript 會自動把包裹物件套用進來，但在宣告原始型別時盡量不要以 <code>var e = new String(a)</code> 這種方式來宣告，這種方法稱為建構式，透過 <code>typeof e</code> 可以看到它目前的型別是”物件”，跟原本操作方式會不同。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;動態型別&quot;&gt;&lt;a href=&quot;#動態型別&quot; class=&quot;headerlink&quot; title=&quot;動態型別&quot;&gt;&lt;/a&gt;動態型別&lt;/h2&gt;&lt;p&gt;JavaScript是弱型別，也能說是動態程式語言。也就是說不必像 C 語言一樣特別宣告變數的型別。程式在執行時會自動轉換並</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://tommm2.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript核心(7)-陳述式與表達式</title>
    <link href="http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(7)-%E9%99%B3%E8%BF%B0%E5%BC%8F%E8%88%87%E8%A1%A8%E9%81%94%E5%BC%8F.html"/>
    <id>http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(7)-%E9%99%B3%E8%BF%B0%E5%BC%8F%E8%88%87%E8%A1%A8%E9%81%94%E5%BC%8F.html</id>
    <published>2021-10-08T08:52:25.000Z</published>
    <updated>2021-10-08T09:10:28.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Statement-陳述式"><a href="#Statement-陳述式" class="headerlink" title="Statement 陳述式"></a>Statement 陳述式</h2><p>JavaScript 的語句類型，用於命令執行指定的一系列操作，最大特徵就是不會回傳結果，例如: if-else、for。</p><h2 id="Expression-表達式-運算式"><a href="#Expression-表達式-運算式" class="headerlink" title="Expression 表達式(運算式)"></a>Expression 表達式(運算式)</h2><p>又可稱為表達式或運算式，經常透過一些符號結合上下語句並運算及回傳結果。</p><p>可以在開方者工具下輸入以下程式碼：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// Statement</span><span class="token keyword">var</span> tom <span class="token operator">=</span> <span class="token string">'湯姆'</span>  <span class="token comment">// 不會回傳任何結果</span><span class="token comment">// Expression</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">100</span>  <span class="token comment">// 回傳200</span>tom <span class="token operator">=</span> <span class="token string">'哈囉湯姆'</span> <span class="token comment">// 會回傳哈囉湯姆</span><span class="token comment">// 函式陳述式、具名函式</span><span class="token keyword">function</span> <span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token comment">// 函式表達式、匿名函式</span><span class="token keyword">var</span> <span class="token function-variable function">callName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>詳細介紹可參考MDN：<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements">陳述式與宣告 - JavaScript | MDN</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Statement-陳述式&quot;&gt;&lt;a href=&quot;#Statement-陳述式&quot; class=&quot;headerlink&quot; title=&quot;Statement 陳述式&quot;&gt;&lt;/a&gt;Statement 陳述式&lt;/h2&gt;&lt;p&gt;JavaScript 的語句類型，用於命令執行指定的</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://tommm2.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript核心(8)-ASI 自動插入分號</title>
    <link href="http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(8)-ASI%E8%87%AA%E5%8B%95%E6%8F%92%E5%85%A5%E5%88%86%E8%99%9F.html"/>
    <id>http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(8)-ASI%E8%87%AA%E5%8B%95%E6%8F%92%E5%85%A5%E5%88%86%E8%99%9F.html</id>
    <published>2021-10-08T08:51:02.000Z</published>
    <updated>2021-10-08T09:16:01.483Z</updated>
    
    <content type="html"><![CDATA[<p>ASI(Automatic Semicolon Insertion)是 JavaScript 的規則，當程式碼沒有加上分號時，會受到 ASI 自動插入分號規則的影響。來看看以下程式碼：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token string">'叫我小明'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>callName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>執行出來的結果會是 <code>undefined</code>，原因是 <code>return</code> 空行之後，會受 ASI 影響，實際執行結果會變成這樣:</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token string">'叫我小明'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>callName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我們再來看看另一段程式碼：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">else</span> a <span class="token operator">=</span> <span class="token number">2</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">// 執行結果: Uncaught SyntaxError: Unexpected token 'else'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>這裡因為 ASI 沒正確啟用，所以不會有 ASI 自動插入分號，理所當然地會跳錯，除錯的方法就是在 <code>a = 1</code>、<code>a = 2</code> 後面加入分號，就能成功運行。</p><p>以下是不會發生 ASI 規則的情況： </p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token number">1.</span> 新的一行是以 <span class="token string">'('</span>、 <span class="token string">'['</span>、 <span class="token string">'/'</span> <span class="token function">開始</span> <span class="token punctuation">(</span>容易出錯的地方<span class="token punctuation">)</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token operator">/</span>test<span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token number">2.</span> 新的一行以 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">+</span><span class="token template-punctuation string">`</span></span>、<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">-</span><span class="token template-punctuation string">`</span></span>、<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">*</span><span class="token template-punctuation string">`</span></span>、<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">%</span><span class="token template-punctuation string">`</span></span> <span class="token function">作開始</span> <span class="token punctuation">(</span>會影響執行結果<span class="token punctuation">)</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token operator">+</span>a<span class="token number">3.</span> 新的一行以 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">,</span><span class="token template-punctuation string">`</span></span>、<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token template-punctuation string">`</span></span> <span class="token function">作開始</span> <span class="token punctuation">(</span>需注意執行結果<span class="token punctuation">)</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// 這裡 b 一樣會 var 被宣告</span>遇到以上問題，在前面加入分號也是解決方法， 如<span class="token operator">:</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">TIP</p><p>需要知道 ASI 的規則是因為 JavaScript 有個叫 ESLint 的風格管理器，<br>而 ESLint 其中一種風格【Standard】就是提倡不加入分號。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ASI(Automatic Semicolon Insertion)是 JavaScript 的規則，當程式碼沒有加上分號時，會受到 ASI 自動插入分號規則的影響。來看看以下程式碼：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-jsx&quot; d</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://tommm2.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript核心(6)-執行緒與同步、非同步</title>
    <link href="http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(6)-%E5%9F%B7%E8%A1%8C%E7%B7%92%E8%88%87%E5%90%8C%E6%AD%A5%E3%80%81%E9%9D%9E%E5%90%8C%E6%AD%A5.html"/>
    <id>http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(6)-%E5%9F%B7%E8%A1%8C%E7%B7%92%E8%88%87%E5%90%8C%E6%AD%A5%E3%80%81%E9%9D%9E%E5%90%8C%E6%AD%A5.html</id>
    <published>2021-10-08T08:41:07.000Z</published>
    <updated>2021-10-08T09:07:10.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="單執行緒與多執行緒-Single-Thread-and-Mulitple-Thread"><a href="#單執行緒與多執行緒-Single-Thread-and-Mulitple-Thread" class="headerlink" title="單執行緒與多執行緒(Single-Thread and Mulitple-Thread)"></a>單執行緒與多執行緒(Single-Thread and Mulitple-Thread)</h2><p>JavaScript 是一個單執行緒的程式語言，單執行緒是一個作業系統的運作概念。以下圖為例，小明在早上有三個任務，而這些任務不能同時做，小明必須先吃完早餐，然後打給漂亮阿姨後，最後在去洗盤子；而多執行緒則反之，小明可以同時執行這些任務。</p><p><img src="https://i.postimg.cc/NjkB0Yr0/image.jpg" alt="任務示意圖"></p><h2 id="同步與非同步-sync-and-async"><a href="#同步與非同步-sync-and-async" class="headerlink" title="同步與非同步(sync and async)"></a>同步與非同步(sync and async)</h2><p>在同步模式下，每個任務要照順序執行，後面任務必須等待前面任務執行完畢，非同步則反之，後面任務的不需要等待前面的任務結束，而是各自執行各自的任務。</p><p><img src="https://i.postimg.cc/Jh7mDgb5/image.jpg" alt="同步與非同步"></p><p>我們用以下程式碼來講講非同步的處理 : </p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">eatBreakfast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'吃早餐'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">washPlate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'洗盤子'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">callSomeone</span><span class="token punctuation">(</span><span class="token parameter">someone</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'打給'</span> <span class="token operator">+</span> someone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someone <span class="token operator">+</span> <span class="token string">'回電'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> aunt <span class="token operator">=</span> <span class="token string">'阿姨'</span><span class="token punctuation">;</span><span class="token function">eatBreakfast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">callSomeone</span><span class="token punctuation">(</span>aunt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">washPlate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 吃早餐</span><span class="token comment">// 打給阿姨</span><span class="token comment">// 洗盤子</span><span class="token comment">// 阿姨回電</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一開始會先執行 <code>doWork()</code> ，再來執行裡面的 <code>eatBreakfast()</code>，輪到執行 <code>callSomeone()</code> 的時候，裡面的 <code>setTimeout()</code> 這個非同步任務不會先執行，而是會移動到 “事件佇列(Event queue)” 裡，並繼續執行 <code>washPlate()</code>，等到 <code>doWork()</code> 同步執行完成後，<code>setTimeout()</code> 才會執行 ，要注意的是<code>setTimeout()</code> 裡的秒數怎麼調整都不會優先執行。</p><p><img src="https://i.postimg.cc/g2sbWDfX/image.jpg" alt="任務順序以及事件佇列"></p><p>可以參考以下有關事件佇列的說明 : <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/EventLoop">並行模型和事件循環 - JavaScript | MDN</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;單執行緒與多執行緒-Single-Thread-and-Mulitple-Thread&quot;&gt;&lt;a href=&quot;#單執行緒與多執行緒-Single-Thread-and-Mulitple-Thread&quot; class=&quot;headerlink&quot; title=&quot;單執行緒與多</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://tommm2.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript核心(5)-記憶體存放與釋放</title>
    <link href="http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(5)-%E8%A8%98%E6%86%B6%E9%AB%94%E5%AD%98%E6%94%BE%E8%88%87%E9%87%8B%E6%94%BE.html"/>
    <id>http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(5)-%E8%A8%98%E6%86%B6%E9%AB%94%E5%AD%98%E6%94%BE%E8%88%87%E9%87%8B%E6%94%BE.html</id>
    <published>2021-10-08T08:28:15.000Z</published>
    <updated>2021-10-08T08:47:37.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回收機制-Garbage-collection"><a href="#回收機制-Garbage-collection" class="headerlink" title="回收機制(Garbage collection)"></a>回收機制(Garbage collection)</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> greeting <span class="token operator">=</span> <span class="token string">'hi'</span><span class="token punctuation">;</span><span class="token keyword">return</span> greeting <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">+</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> mon <span class="token operator">=</span> <span class="token string">'老媽'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">sayHi</span><span class="token punctuation">(</span>mon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.postimg.cc/Rh5cGcCG/image.jpg" alt="記憶體釋放順序"><br>黑色方塊代表記憶體，當 <code>sayHi()</code> 執行完後，它的執行堆疊會離開，而記憶體也會同時釋放掉，再來是 <code>doSomething()</code>，就跟 <code>sayHi()</code> 一樣，以此類推 ，最後僅留下 “全域執行環境” 所占存的記憶體。</p><p>可以參考一下回收機制規則：<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Memory_Management">記憶體管理 - JavaScript | MDN</a></p><hr><p>用另一段程式碼來看看其他情況 : </p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 隨機產生字串</span><span class="token keyword">function</span> <span class="token function">randomString</span><span class="token punctuation">(</span><span class="token parameter">len</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">var</span> char <span class="token operator">=</span> <span class="token string">'abcederglfgithd'</span><span class="token punctuation">;</span><span class="token keyword">var</span> charLength <span class="token operator">=</span> char<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result <span class="token operator">+=</span> char<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> charLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> demoData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>demoData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">randomString</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demoData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Chrome console裡的行為中的行為也需要記憶體</span><span class="token punctuation">&#125;</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打開開發者工具的 Memory 看看執行程式的執行結果以及占掉多少記憶體</p><p><img src="https://i.postimg.cc/KY1B29RJ/image.jpg" alt="console.log"></p><p>照理說函式執行完畢，記憶體就會跟著執行堆疊離開而釋放，但檢查後記憶體會發現記憶體沒釋放，這是為甚麼呢?</p><p>這裡要先把 console 裡的東西移除掉，再來去檢查 memory ，會發現記憶體被釋放了，這是因為 console 裡的行為也需要記憶體。</p><p><img src="https://i.postimg.cc/HWw5d8kD/image.jpg" alt="console.log"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;回收機制-Garbage-collection&quot;&gt;&lt;a href=&quot;#回收機制-Garbage-collection&quot; class=&quot;headerlink&quot; title=&quot;回收機制(Garbage collection)&quot;&gt;&lt;/a&gt;回收機制(Garbage col</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://tommm2.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 核心(4)-提升(hoisting)</title>
    <link href="http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(4)-%E6%8F%90%E5%8D%87.html"/>
    <id>http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(4)-%E6%8F%90%E5%8D%87.html</id>
    <published>2021-10-08T07:49:42.000Z</published>
    <updated>2021-10-08T08:33:46.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hoisting-提升"><a href="#Hoisting-提升" class="headerlink" title="Hoisting(提升)"></a>Hoisting(提升)</h2><p>是一種釐清 JaveScript 在執行階段如何運行的思路（尤其是在創建和執行階段）。然而，提升可能會讓人誤解：例如，提升看起來是單純將變數和函式宣告，移動到程式區塊的頂端，然而並非如此。變數和函數的宣告會在編譯階段就被放入記憶體，但實際位置和程式碼中完全一樣。</p><p>執行環境會分為兩種階段 :</p><ul><li>創造階段</li><li>執行階段</li></ul><p>以 <code>var a = 1</code> 來說：</p><ol><li>在創造階段中會先把變數 <code>a</code> 放到記憶體，但還不會賦予值，這時檢查會是 <code>undefined</code>。</li><li>在執行階段賦予 <code>1</code> 這個值。</li></ol><div class="custom-quote tip"><span class="custom-quote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06"></path><path stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M11.99 18H12.01"></path></svg></span><p class="custom-quote-title">TIP</p><p>要注意的是 “函式陳述式” 在創造階段就會優先載入。</p></div><hr><p>來看看範例: </p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">whosName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">whosName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>myName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    myName <span class="token operator">=</span> <span class="token string">'杰倫'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> myName <span class="token operator">=</span> <span class="token string">'小明'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述程式碼經過 hoisting 後：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//創造階段</span><span class="token keyword">function</span> <span class="token function">whosName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>myName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>myName <span class="token operator">=</span> <span class="token string">'杰倫'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> myName<span class="token punctuation">;</span><span class="token comment">//執行階段</span><span class="token function">whosName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myName <span class="token operator">=</span> <span class="token string">'小明'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.在創造階段時 “函式優先” ，所以 <code>whosName()</code> 會先被往上提，此時 <code>myName</code> 的值是 <code>undefined</code>，所以 <code>if(myName)</code> 的條件不成立。</p><p>2.<code>whosName()</code> 的作用域找不到 <code>myName</code>，結果為 <code>undefined</code>，所以不會執行 <code>myName = &#39;杰倫&#39;</code>。</p><p>3.<code>myName = &#39;小明&#39;</code>，已被賦予 <code>myName</code>，所以印出來的結果為 <code>小明</code> 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Hoisting-提升&quot;&gt;&lt;a href=&quot;#Hoisting-提升&quot; class=&quot;headerlink&quot; title=&quot;Hoisting(提升)&quot;&gt;&lt;/a&gt;Hoisting(提升)&lt;/h2&gt;&lt;p&gt;是一種釐清 JaveScript 在執行階段如何運行的思路（尤其</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://tommm2.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 核心(3)-範圍鍊(Scope chain)</title>
    <link href="http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(3)-%E7%AF%84%E5%9C%8D%E9%8D%8A.html"/>
    <id>http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(3)-%E7%AF%84%E5%9C%8D%E9%8D%8A.html</id>
    <published>2021-10-08T07:37:55.000Z</published>
    <updated>2021-10-08T08:13:41.869Z</updated>
    
    <content type="html"><![CDATA[<p>外部環境會依照函數本身的環境去尋找要取用的變數(程式碼寫在哪裡)，如果找不到會再往範圍鏈上去找，直到全域執行環境，</p><p>參考以下程式碼 : </p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這裡 <code>fn1()</code> 和 <code>fn2()</code> 的範圍鍊指向全域環境，跟執行環境沒任何關係；在執行 <code>fn2()</code> 時，裡面的 <code>fn1()</code> 會查找到全域的 <code>value</code>，而不是 <code>fn2()</code> 裡的 <code>value</code>。</p><p>另一個範例：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token string">'老媽'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span> <span class="token operator">+</span>　person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> preson <span class="token operator">=</span> <span class="token string">'老爸'</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">mettAuntie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token string">'阿姨'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'哈囉~'</span> <span class="token operator">+</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">mettAuntie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hi老媽  哈囉~阿姨 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>執行 <code>doWork()</code> 後：</p><ol><li>執行 <code>sayHi()</code> ，函式裡沒有 <code>person</code> 變數，所以向外查找到全域的 <code>person</code>，印出 <code>hi老媽</code>。</li><li>執行 <code>mettAuntie()</code>，函式裡有 <code>person</code>，所以直接取用它，印出 <code>哈囉~阿姨</code>。 </li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;外部環境會依照函數本身的環境去尋找要取用的變數(程式碼寫在哪裡)，如果找不到會再往範圍鏈上去找，直到全域執行環境，&lt;/p&gt;
&lt;p&gt;參考以下程式碼 : &lt;/p&gt;
&lt;pre class=&quot;line-numbers language-jsx&quot; data-language=&quot;jsx</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://tommm2.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 核心(2)-執行環境與執行堆疊</title>
    <link href="http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(2)-%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83%E8%88%87%E5%9F%B7%E8%A1%8C%E5%A0%86%E7%96%8A.html"/>
    <id>http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(2)-%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83%E8%88%87%E5%9F%B7%E8%A1%8C%E5%A0%86%E7%96%8A.html</id>
    <published>2021-10-08T07:27:36.000Z</published>
    <updated>2021-10-08T07:41:37.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="執行環境-Execution-environment"><a href="#執行環境-Execution-environment" class="headerlink" title="執行環境(Execution environment)"></a>執行環境(Execution environment)</h2><p><img src="https://i.postimg.cc/Qx7dbN9n/image.jpg" alt="https://i.postimg.cc/Qx7dbN9n/image.jpg"></p><p>如果沒執行函式，函式裡的變數不會產生，並且需要執行函式才會產生執行屬於它的執行環境。</p><p><img src="https://i.postimg.cc/28dVY8kL/image.jpg" alt="https://i.postimg.cc/28dVY8kL/image.jpg"></p><p>全域環境會在瀏覽器開啟或是 node.js 後端啟動時建立，並且是瀏覽器就會產生 <code>window</code> 全域變數，如果是 node.js 就會產生 <code>global</code> 全域變數。</p><h2 id="執行堆疊-Execution-stack"><a href="#執行堆疊-Execution-stack" class="headerlink" title="執行堆疊(Execution stack)"></a>執行堆疊(Execution stack)</h2><p>參考以下範例 : </p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> greeting <span class="token operator">=</span> <span class="token string">'hi'</span><span class="token punctuation">;</span><span class="token keyword">return</span> greeting <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">+</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> mon <span class="token operator">=</span> <span class="token string">'老媽'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">sayHi</span><span class="token punctuation">(</span>mon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>網頁一開啟時，會產生一個全域執行環境， 當 <code>doSomething()</code> 被執行時 ，會產生 <code>doSomething()</code> 的執行環境並向上堆疊 ，再來呼叫 <code>sayHi()</code> ，產生 <code>SayHi()</code> 執行環境後繼續向上堆疊。執行環境就是這樣一層一層向上堆疊，跟函式的宣告沒有關連性，而是與呼叫的位置相關。</p><p><img src="https://i.postimg.cc/SKJ56Rjn/image.jpg" alt="https://i.postimg.cc/SKJ56Rjn/image.jpg"></p><p>執行堆疊在離開時也是一樣，<code>sayHi()</code> 會先離開，再來是 <code>doSomething()</code> ，最後剩下全域的執行環境。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;執行環境-Execution-environment&quot;&gt;&lt;a href=&quot;#執行環境-Execution-environment&quot; class=&quot;headerlink&quot; title=&quot;執行環境(Execution environment)&quot;&gt;&lt;/a&gt;執行環境(Ex</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://tommm2.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 核心(1)-語法作用域</title>
    <link href="http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(1)-%E8%AA%9E%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F.html"/>
    <id>http://tommm2.github.io/post/JavaScript%E6%A0%B8%E5%BF%83(1)-%E8%AA%9E%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F.html</id>
    <published>2021-10-01T02:35:08.000Z</published>
    <updated>2021-10-08T07:40:34.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript是語法作用域-靜態作用域"><a href="#JavaScript是語法作用域-靜態作用域" class="headerlink" title="JavaScript是語法作用域(靜態作用域)"></a>JavaScript是語法作用域(靜態作用域)</h2><p><img src="https://i.postimg.cc/mkM8dFGr/image.jpg" alt="https://i.postimg.cc/mkM8dFGr/image.jpg"></p><p><strong>語法作用域</strong> :  又稱靜態作用域，在語法解析時，就已經確定作用域，且不會再改變。</p><p><strong>動態作用域</strong> :  變數的作用域再函式調用的時候才會決定。</p><p>看看以下範例 :</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn1</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 向外查找會找到 value = 1</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fn2</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 這段變數只會在 fn2() 裡作用</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因為 JavaScript 是語法作用域(靜態作用域)，<strong>作用域在語法解析時就已經確定了</strong>；<code>value = 2</code> 只能在 <code>fn2()</code> 裡作用，而 <code>fn2()</code> 裡的 <code>fn1()</code> 被執行時會向外查找全域的 <code>value = 1</code> 。</p><p>如果是動態作用域的話會取到 <code>value = 2</code> 的值 ，因為變數的 <strong>作用域在函式調用的時候決定</strong>，因此當而 <code>fn2()</code> 裡的 <code>fn1()</code> 被執行時，會取到 <code>value = 2</code> 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JavaScript是語法作用域-靜態作用域&quot;&gt;&lt;a href=&quot;#JavaScript是語法作用域-靜態作用域&quot; class=&quot;headerlink&quot; title=&quot;JavaScript是語法作用域(靜態作用域)&quot;&gt;&lt;/a&gt;JavaScript是語法作用域(靜態</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://tommm2.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>

{"title":"JavaScript 核心(2)-執行環境與執行堆疊","uid":"30b605c41c930f0491bf4de6a3f75a4d","slug":"JavaScript核心(2)-執行環境與執行堆疊","date":"2021-10-08T07:27:36.000Z","updated":"2021-10-08T07:41:37.290Z","comments":true,"path":"api/articles/JavaScript核心(2)-執行環境與執行堆疊.json","keywords":"前端,技術,網頁開發,前端開發,網頁,JavaScript,CSS,HTML,Vue,Vue.js,前端筆記","cover":"https://i.postimg.cc/tC28h7Zc/javascript.png","content":"<h2 id=\"執行環境-Execution-environment\"><a href=\"#執行環境-Execution-environment\" class=\"headerlink\" title=\"執行環境(Execution environment)\"></a>執行環境(Execution environment)</h2><p><img src=\"https://i.postimg.cc/Qx7dbN9n/image.jpg\" alt=\"https://i.postimg.cc/Qx7dbN9n/image.jpg\"></p>\n<p>如果沒執行函式，函式裡的變數不會產生，並且需要執行函式才會產生執行屬於它的執行環境。</p>\n<p><img src=\"https://i.postimg.cc/28dVY8kL/image.jpg\" alt=\"https://i.postimg.cc/28dVY8kL/image.jpg\"></p>\n<p>全域環境會在瀏覽器開啟或是 node.js 後端啟動時建立，並且是瀏覽器就會產生 <code>window</code> 全域變數，如果是 node.js 就會產生 <code>global</code> 全域變數。</p>\n<h2 id=\"執行堆疊-Execution-stack\"><a href=\"#執行堆疊-Execution-stack\" class=\"headerlink\" title=\"執行堆疊(Execution stack)\"></a>執行堆疊(Execution stack)</h2><p>參考以下範例 : </p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> greeting <span class=\"token operator\">+</span> <span class=\"token string\">''</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> mon <span class=\"token operator\">=</span> <span class=\"token string\">'老媽'</span><span class=\"token punctuation\">;</span>\n\t\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>mon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>網頁一開啟時，會產生一個全域執行環境， 當 <code>doSomething()</code> 被執行時 ，會產生 <code>doSomething()</code> 的執行環境並向上堆疊 ，再來呼叫 <code>sayHi()</code> ，產生 <code>SayHi()</code> 執行環境後繼續向上堆疊。執行環境就是這樣一層一層向上堆疊，跟函式的宣告沒有關連性，而是與呼叫的位置相關。</p>\n<p><img src=\"https://i.postimg.cc/SKJ56Rjn/image.jpg\" alt=\"https://i.postimg.cc/SKJ56Rjn/image.jpg\"></p>\n<p>執行堆疊在離開時也是一樣，<code>sayHi()</code> 會先離開，再來是 <code>doSomething()</code> ，最後剩下全域的執行環境。</p>\n","text":"執行環境(Execution environment) 如果沒執行函式，函式裡的變數不會產生，並且需要執行函式才會產生執行屬於它的執行環境。 全域環境會在瀏覽器開啟或是 node.js 後端啟動時建立，並且是瀏覽器就會產生 window 全域變數，如果是 node.js 就會產生...","link":"","photos":[],"count_time":{"symbolsCount":585,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":10,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83-Execution-environment\"><span class=\"toc-text\">執行環境(Execution environment)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%B7%E8%A1%8C%E5%A0%86%E7%96%8A-Execution-stack\"><span class=\"toc-text\">執行堆疊(Execution stack)</span></a></li></ol>","author":{"name":"tommm2","slug":"blog-author","avatar":"https://i.postimg.cc/nzsgrNDd/new.jpg","link":"/","description":"紀錄學習筆記以及自己成長的過程","socials":{"github":"https://github.com/tommm2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"cakeresume":{"icon":"fab fa-cuttlefish","link":"https://www.cakeresume.com/real-pro"}}}},"mapped":true,"prev_post":{"title":"JavaScript 核心(3)-範圍鍊(Scope chain)","uid":"f1ee2e5d0a69b1f49650eb6d8658482d","slug":"JavaScript核心(3)-範圍鍊","date":"2021-10-08T07:37:55.000Z","updated":"2021-10-08T08:13:41.869Z","comments":true,"path":"api/articles/JavaScript核心(3)-範圍鍊.json","keywords":"前端,技術,網頁開發,前端開發,網頁,JavaScript,CSS,HTML,Vue,Vue.js,前端筆記","cover":"https://i.postimg.cc/tC28h7Zc/javascript.png","text":"外部環境會依照函數本身的環境去尋找要取用的變數(程式碼寫在哪裡)，如果找不到會再往範圍鏈上去找，直到全域執行環境， 參考以下程式碼 : var value = 1; function fn1() &#123; console.log(value); &#125; function...","link":"","photos":[],"count_time":{"symbolsCount":710,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":10,"path":"api/tags/JavaScript.json"}],"author":{"name":"tommm2","slug":"blog-author","avatar":"https://i.postimg.cc/nzsgrNDd/new.jpg","link":"/","description":"紀錄學習筆記以及自己成長的過程","socials":{"github":"https://github.com/tommm2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"cakeresume":{"icon":"fab fa-cuttlefish","link":"https://www.cakeresume.com/real-pro"}}}}},"next_post":{}}
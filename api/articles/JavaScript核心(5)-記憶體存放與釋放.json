{"title":"JavaScript核心(5)-記憶體存放與釋放","uid":"41a55d510962c7a81bbb07b635138fa7","slug":"JavaScript核心(5)-記憶體存放與釋放","date":"2021-10-08T08:28:15.000Z","updated":"2021-10-08T08:47:37.494Z","comments":true,"path":"api/articles/JavaScript核心(5)-記憶體存放與釋放.json","keywords":"前端,技術,網頁開發,前端開發,網頁,JavaScript,CSS,HTML,Vue,Vue.js,前端筆記","cover":"https://i.postimg.cc/tC28h7Zc/javascript.png","content":"<h2 id=\"回收機制-Garbage-collection\"><a href=\"#回收機制-Garbage-collection\" class=\"headerlink\" title=\"回收機制(Garbage collection)\"></a>回收機制(Garbage collection)</h2><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> greeting <span class=\"token operator\">+</span> <span class=\"token string\">''</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> mon <span class=\"token operator\">=</span> <span class=\"token string\">'老媽'</span><span class=\"token punctuation\">;</span>\n\t\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>mon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://i.postimg.cc/Rh5cGcCG/image.jpg\" alt=\"記憶體釋放順序\"><br>黑色方塊代表記憶體，當 <code>sayHi()</code> 執行完後，它的執行堆疊會離開，而記憶體也會同時釋放掉，再來是 <code>doSomething()</code>，就跟 <code>sayHi()</code> 一樣，以此類推 ，最後僅留下 “全域執行環境” 所占存的記憶體。</p>\n<p>可以參考一下回收機制規則：<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Memory_Management\">記憶體管理 - JavaScript | MDN</a></p>\n<hr>\n<p>用另一段程式碼來看看其他情況 : </p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 隨機產生字串</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">randomString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">len</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">var</span> char <span class=\"token operator\">=</span> <span class=\"token string\">'abcederglfgithd'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">var</span> charLength <span class=\"token operator\">=</span> char<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tresult <span class=\"token operator\">+=</span> char<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> charLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> demoData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tdemoData<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">randomString</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>demoData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Chrome console裡的行為中的行為也需要記憶體</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>打開開發者工具的 Memory 看看執行程式的執行結果以及占掉多少記憶體</p>\n<p><img src=\"https://i.postimg.cc/KY1B29RJ/image.jpg\" alt=\"console.log\"></p>\n<p>照理說函式執行完畢，記憶體就會跟著執行堆疊離開而釋放，但檢查後記憶體會發現記憶體沒釋放，這是為甚麼呢?</p>\n<p>這裡要先把 console 裡的東西移除掉，再來去檢查 memory ，會發現記憶體被釋放了，這是因為 console 裡的行為也需要記憶體。</p>\n<p><img src=\"https://i.postimg.cc/HWw5d8kD/image.jpg\" alt=\"console.log\"></p>\n","text":"回收機制(Garbage collection)function sayHi(name) &#123; var greeting = 'hi'; return greeting + '' + name; &#125; function doSomething() &#123; v...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":10,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E6%94%B6%E6%A9%9F%E5%88%B6-Garbage-collection\"><span class=\"toc-text\">回收機制(Garbage collection)</span></a></li></ol>","author":{"name":"tommm2","slug":"blog-author","avatar":"https://i.postimg.cc/nzsgrNDd/new.jpg","link":"/","description":"立志當全端工程師的男人","socials":{"github":"https://github.com/tommm2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaScript核心(6)-執行緒與同步、非同步","uid":"bdb76982bd96f93dcf660de6d1a44759","slug":"JavaScript核心(6)-執行緒與同步、非同步","date":"2021-10-08T08:41:07.000Z","updated":"2021-10-08T09:07:10.593Z","comments":true,"path":"api/articles/JavaScript核心(6)-執行緒與同步、非同步.json","keywords":"前端,技術,網頁開發,前端開發,網頁,JavaScript,CSS,HTML,Vue,Vue.js,前端筆記","cover":"https://i.postimg.cc/tC28h7Zc/javascript.png","text":"單執行緒與多執行緒(Single-Thread and Mulitple-Thread)JavaScript 是一個單執行緒的程式語言，單執行緒是一個作業系統的運作概念。以下圖為例，小明在早上有三個任務，而這些任務不能同時做，小明必須先吃完早餐，然後打給漂亮阿姨後，最後在去洗盤子...","link":"","photos":[],"count_time":{"symbolsCount":951,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":10,"path":"api/tags/JavaScript.json"}],"author":{"name":"tommm2","slug":"blog-author","avatar":"https://i.postimg.cc/nzsgrNDd/new.jpg","link":"/","description":"立志當全端工程師的男人","socials":{"github":"https://github.com/tommm2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JavaScript 核心(4)-提升(hoisting)","uid":"fb2e8d543ead028edd5fc18c6f464347","slug":"JavaScript核心(4)-提升","date":"2021-10-08T07:49:42.000Z","updated":"2021-10-08T08:33:46.988Z","comments":true,"path":"api/articles/JavaScript核心(4)-提升.json","keywords":"前端,技術,網頁開發,前端開發,網頁,JavaScript,CSS,HTML,Vue,Vue.js,前端筆記","cover":"https://i.postimg.cc/tC28h7Zc/javascript.png","text":"Hoisting(提升)是一種釐清 JaveScript 在執行階段如何運行的思路（尤其是在創建和執行階段）。然而，提升可能會讓人誤解：例如，提升看起來是單純將變數和函式宣告，移動到程式區塊的頂端，然而並非如此。變數和函數的宣告會在編譯階段就被放入記憶體，但實際位置和程式碼中完全...","link":"","photos":[],"count_time":{"symbolsCount":817,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":10,"path":"api/tags/JavaScript.json"}],"author":{"name":"tommm2","slug":"blog-author","avatar":"https://i.postimg.cc/nzsgrNDd/new.jpg","link":"/","description":"立志當全端工程師的男人","socials":{"github":"https://github.com/tommm2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
{"title":"JavaScript 核心(4)-提升(hoisting)","uid":"fb2e8d543ead028edd5fc18c6f464347","slug":"JavaScript核心(4)-提升","date":"2021-10-08T07:49:42.000Z","updated":"2021-10-08T08:33:46.988Z","comments":true,"path":"api/articles/JavaScript核心(4)-提升.json","keywords":"前端,技術,網頁開發,前端開發,網頁,JavaScript,CSS,HTML,Vue,Vue.js,前端筆記","cover":"https://i.postimg.cc/tC28h7Zc/javascript.png","content":"<h2 id=\"Hoisting-提升\"><a href=\"#Hoisting-提升\" class=\"headerlink\" title=\"Hoisting(提升)\"></a>Hoisting(提升)</h2><p>是一種釐清 JaveScript 在執行階段如何運行的思路（尤其是在創建和執行階段）。然而，提升可能會讓人誤解：例如，提升看起來是單純將變數和函式宣告，移動到程式區塊的頂端，然而並非如此。變數和函數的宣告會在編譯階段就被放入記憶體，但實際位置和程式碼中完全一樣。</p>\n<p>執行環境會分為兩種階段 :</p>\n<ul>\n<li>創造階段</li>\n<li>執行階段</li>\n</ul>\n<p>以 <code>var a = 1</code> 來說：</p>\n<ol>\n<li>在創造階段中會先把變數 <code>a</code> 放到記憶體，但還不會賦予值，這時檢查會是 <code>undefined</code>。</li>\n<li>在執行階段賦予 <code>1</code> 這個值。</li>\n</ol>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p>要注意的是 “函式陳述式” 在創造階段就會優先載入。</p>\n</div>\n<hr>\n<p>來看看範例: </p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token function\">whosName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">whosName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    myName <span class=\"token operator\">=</span> <span class=\"token string\">'杰倫'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">'小明'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myName<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上述程式碼經過 hoisting 後：</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//創造階段</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">whosName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tmyName <span class=\"token operator\">=</span> <span class=\"token string\">'杰倫'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> myName<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//執行階段</span>\n\n<span class=\"token function\">whosName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyName <span class=\"token operator\">=</span> <span class=\"token string\">'小明'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>1.在創造階段時 “函式優先” ，所以 <code>whosName()</code> 會先被往上提，此時 <code>myName</code> 的值是 <code>undefined</code>，所以 <code>if(myName)</code> 的條件不成立。</p>\n<p>2.<code>whosName()</code> 的作用域找不到 <code>myName</code>，結果為 <code>undefined</code>，所以不會執行 <code>myName = &#39;杰倫&#39;</code>。</p>\n<p>3.<code>myName = &#39;小明&#39;</code>，已被賦予 <code>myName</code>，所以印出來的結果為 <code>小明</code> 。</p>\n","text":"Hoisting(提升)是一種釐清 JaveScript 在執行階段如何運行的思路（尤其是在創建和執行階段）。然而，提升可能會讓人誤解：例如，提升看起來是單純將變數和函式宣告，移動到程式區塊的頂端，然而並非如此。變數和函數的宣告會在編譯階段就被放入記憶體，但實際位置和程式碼中完全...","link":"","photos":[],"count_time":{"symbolsCount":817,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":10,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Hoisting-%E6%8F%90%E5%8D%87\"><span class=\"toc-text\">Hoisting(提升)</span></a></li></ol>","author":{"name":"tommm2","slug":"blog-author","avatar":"https://i.postimg.cc/nzsgrNDd/new.jpg","link":"/","description":"立志當全端工程師的男人","socials":{"github":"https://github.com/tommm2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaScript核心(5)-記憶體存放與釋放","uid":"41a55d510962c7a81bbb07b635138fa7","slug":"JavaScript核心(5)-記憶體存放與釋放","date":"2021-10-08T08:28:15.000Z","updated":"2021-10-08T08:47:37.494Z","comments":true,"path":"api/articles/JavaScript核心(5)-記憶體存放與釋放.json","keywords":"前端,技術,網頁開發,前端開發,網頁,JavaScript,CSS,HTML,Vue,Vue.js,前端筆記","cover":"https://i.postimg.cc/tC28h7Zc/javascript.png","text":"回收機制(Garbage collection)function sayHi(name) &#123; var greeting = 'hi'; return greeting + '' + name; &#125; function doSomething() &#123; v...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":10,"path":"api/tags/JavaScript.json"}],"author":{"name":"tommm2","slug":"blog-author","avatar":"https://i.postimg.cc/nzsgrNDd/new.jpg","link":"/","description":"立志當全端工程師的男人","socials":{"github":"https://github.com/tommm2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JavaScript 核心(3)-範圍鍊(Scope chain)","uid":"f1ee2e5d0a69b1f49650eb6d8658482d","slug":"JavaScript核心(3)-範圍鍊","date":"2021-10-08T07:37:55.000Z","updated":"2021-10-08T08:13:41.869Z","comments":true,"path":"api/articles/JavaScript核心(3)-範圍鍊.json","keywords":"前端,技術,網頁開發,前端開發,網頁,JavaScript,CSS,HTML,Vue,Vue.js,前端筆記","cover":"https://i.postimg.cc/tC28h7Zc/javascript.png","text":"外部環境會依照函數本身的環境去尋找要取用的變數(程式碼寫在哪裡)，如果找不到會再往範圍鏈上去找，直到全域執行環境， 參考以下程式碼 : var value = 1; function fn1() &#123; console.log(value); &#125; function...","link":"","photos":[],"count_time":{"symbolsCount":710,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":10,"path":"api/tags/JavaScript.json"}],"author":{"name":"tommm2","slug":"blog-author","avatar":"https://i.postimg.cc/nzsgrNDd/new.jpg","link":"/","description":"立志當全端工程師的男人","socials":{"github":"https://github.com/tommm2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
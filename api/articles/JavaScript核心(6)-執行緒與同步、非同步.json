{"title":"JavaScript核心(6)-執行緒與同步、非同步","uid":"bdb76982bd96f93dcf660de6d1a44759","slug":"JavaScript核心(6)-執行緒與同步、非同步","date":"2021-10-08T08:41:07.000Z","updated":"2021-10-08T09:07:10.593Z","comments":true,"path":"api/articles/JavaScript核心(6)-執行緒與同步、非同步.json","keywords":"前端,技術,網頁開發,前端開發,網頁,JavaScript,CSS,HTML,Vue,Vue.js,前端筆記","cover":"https://i.postimg.cc/tC28h7Zc/javascript.png","content":"<h2 id=\"單執行緒與多執行緒-Single-Thread-and-Mulitple-Thread\"><a href=\"#單執行緒與多執行緒-Single-Thread-and-Mulitple-Thread\" class=\"headerlink\" title=\"單執行緒與多執行緒(Single-Thread and Mulitple-Thread)\"></a>單執行緒與多執行緒(Single-Thread and Mulitple-Thread)</h2><p>JavaScript 是一個單執行緒的程式語言，單執行緒是一個作業系統的運作概念。以下圖為例，小明在早上有三個任務，而這些任務不能同時做，小明必須先吃完早餐，然後打給漂亮阿姨後，最後在去洗盤子；而多執行緒則反之，小明可以同時執行這些任務。</p>\n<p><img src=\"https://i.postimg.cc/NjkB0Yr0/image.jpg\" alt=\"任務示意圖\"></p>\n<h2 id=\"同步與非同步-sync-and-async\"><a href=\"#同步與非同步-sync-and-async\" class=\"headerlink\" title=\"同步與非同步(sync and async)\"></a>同步與非同步(sync and async)</h2><p>在同步模式下，每個任務要照順序執行，後面任務必須等待前面任務執行完畢，非同步則反之，後面任務的不需要等待前面的任務結束，而是各自執行各自的任務。</p>\n<p><img src=\"https://i.postimg.cc/Jh7mDgb5/image.jpg\" alt=\"同步與非同步\"></p>\n<p>我們用以下程式碼來講講非同步的處理 : </p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">eatBreakfast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'吃早餐'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">washPlate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'洗盤子'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">callSomeone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">someone</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'打給'</span> <span class=\"token operator\">+</span> someone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>someone <span class=\"token operator\">+</span> <span class=\"token string\">'回電'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> aunt <span class=\"token operator\">=</span> <span class=\"token string\">'阿姨'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">eatBreakfast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">callSomeone</span><span class=\"token punctuation\">(</span>aunt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">washPlate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 吃早餐</span>\n<span class=\"token comment\">// 打給阿姨</span>\n<span class=\"token comment\">// 洗盤子</span>\n<span class=\"token comment\">// 阿姨回電</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一開始會先執行 <code>doWork()</code> ，再來執行裡面的 <code>eatBreakfast()</code>，輪到執行 <code>callSomeone()</code> 的時候，裡面的 <code>setTimeout()</code> 這個非同步任務不會先執行，而是會移動到 “事件佇列(Event queue)” 裡，並繼續執行 <code>washPlate()</code>，等到 <code>doWork()</code> 同步執行完成後，<code>setTimeout()</code> 才會執行 ，要注意的是<code>setTimeout()</code> 裡的秒數怎麼調整都不會優先執行。</p>\n<p><img src=\"https://i.postimg.cc/g2sbWDfX/image.jpg\" alt=\"任務順序以及事件佇列\"></p>\n<p>可以參考以下有關事件佇列的說明 : <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/EventLoop\">並行模型和事件循環 - JavaScript | MDN</a></p>\n","text":"單執行緒與多執行緒(Single-Thread and Mulitple-Thread)JavaScript 是一個單執行緒的程式語言，單執行緒是一個作業系統的運作概念。以下圖為例，小明在早上有三個任務，而這些任務不能同時做，小明必須先吃完早餐，然後打給漂亮阿姨後，最後在去洗盤子...","link":"","photos":[],"count_time":{"symbolsCount":951,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":10,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%96%AE%E5%9F%B7%E8%A1%8C%E7%B7%92%E8%88%87%E5%A4%9A%E5%9F%B7%E8%A1%8C%E7%B7%92-Single-Thread-and-Mulitple-Thread\"><span class=\"toc-text\">單執行緒與多執行緒(Single-Thread and Mulitple-Thread)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E8%88%87%E9%9D%9E%E5%90%8C%E6%AD%A5-sync-and-async\"><span class=\"toc-text\">同步與非同步(sync and async)</span></a></li></ol>","author":{"name":"tommm2","slug":"blog-author","avatar":"https://i.postimg.cc/nzsgrNDd/new.jpg","link":"/","description":"紀錄學習筆記以及自己成長的過程","socials":{"github":"https://github.com/tommm2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"cakeresume":{"icon":"fab fa-cuttlefish","link":"https://www.cakeresume.com/real-pro"}}}},"mapped":true,"prev_post":{"title":"JavaScript核心(8)-ASI 自動插入分號","uid":"13acb8ef4e4194e0a3601d51af0c808e","slug":"JavaScript核心(8)-ASI自動插入分號","date":"2021-10-08T08:51:02.000Z","updated":"2021-10-08T09:16:01.483Z","comments":true,"path":"api/articles/JavaScript核心(8)-ASI自動插入分號.json","keywords":"前端,技術,網頁開發,前端開發,網頁,JavaScript,CSS,HTML,Vue,Vue.js,前端筆記","cover":"https://i.postimg.cc/tC28h7Zc/javascript.png","text":"ASI(Automatic Semicolon Insertion)是 JavaScript 的規則，當程式碼沒有加上分號時，會受到 ASI 自動插入分號規則的影響。來看看以下程式碼： function callName() &#123; return '叫我小明'; &#125...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":10,"path":"api/tags/JavaScript.json"}],"author":{"name":"tommm2","slug":"blog-author","avatar":"https://i.postimg.cc/nzsgrNDd/new.jpg","link":"/","description":"紀錄學習筆記以及自己成長的過程","socials":{"github":"https://github.com/tommm2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"cakeresume":{"icon":"fab fa-cuttlefish","link":"https://www.cakeresume.com/real-pro"}}}}},"next_post":{"title":"JavaScript核心(5)-記憶體存放與釋放","uid":"41a55d510962c7a81bbb07b635138fa7","slug":"JavaScript核心(5)-記憶體存放與釋放","date":"2021-10-08T08:28:15.000Z","updated":"2021-10-08T08:47:37.494Z","comments":true,"path":"api/articles/JavaScript核心(5)-記憶體存放與釋放.json","keywords":"前端,技術,網頁開發,前端開發,網頁,JavaScript,CSS,HTML,Vue,Vue.js,前端筆記","cover":"https://i.postimg.cc/tC28h7Zc/javascript.png","text":"回收機制(Garbage collection)function sayHi(name) &#123; var greeting = 'hi'; return greeting + '' + name; &#125; function doSomething() &#123; v...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":10,"path":"api/tags/JavaScript.json"}],"author":{"name":"tommm2","slug":"blog-author","avatar":"https://i.postimg.cc/nzsgrNDd/new.jpg","link":"/","description":"紀錄學習筆記以及自己成長的過程","socials":{"github":"https://github.com/tommm2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"cakeresume":{"icon":"fab fa-cuttlefish","link":"https://www.cakeresume.com/real-pro"}}}}}}
{"title":"JavaScript核心(8)-ASI 自動插入分號","uid":"13acb8ef4e4194e0a3601d51af0c808e","slug":"JavaScript核心(8)-ASI自動插入分號","date":"2021-10-08T08:51:02.000Z","updated":"2021-10-08T09:16:01.483Z","comments":true,"path":"api/articles/JavaScript核心(8)-ASI自動插入分號.json","keywords":"前端,技術,網頁開發,前端開發,網頁,JavaScript,CSS,HTML,Vue,Vue.js,前端筆記","cover":"https://i.postimg.cc/tC28h7Zc/javascript.png","content":"<p>ASI(Automatic Semicolon Insertion)是 JavaScript 的規則，當程式碼沒有加上分號時，會受到 ASI 自動插入分號規則的影響。來看看以下程式碼：</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">callName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span>\n\t<span class=\"token string\">'叫我小明'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>callName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>執行出來的結果會是 <code>undefined</code>，原因是 <code>return</code> 空行之後，會受 ASI 影響，實際執行結果會變成這樣:</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">callName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token string\">'叫我小明'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>callName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我們再來看看另一段程式碼：</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 執行結果: Uncaught SyntaxError: Unexpected token 'else'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>這裡因為 ASI 沒正確啟用，所以不會有 ASI 自動插入分號，理所當然地會跳錯，除錯的方法就是在 <code>a = 1</code>、<code>a = 2</code> 後面加入分號，就能成功運行。</p>\n<p>以下是不會發生 ASI 規則的情況： </p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token number\">1.</span> 新的一行是以 <span class=\"token string\">'('</span>、 <span class=\"token string\">'['</span>、 <span class=\"token string\">'/'</span> <span class=\"token function\">開始</span> <span class=\"token punctuation\">(</span>容易出錯的地方<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">a</span>\n<span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a\n<span class=\"token operator\">/</span>test<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">2.</span> 新的一行以 <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">+</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">-</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">*</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">%</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token function\">作開始</span> <span class=\"token punctuation\">(</span>會影響執行結果<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a\n<span class=\"token operator\">+</span>a\n\n<span class=\"token number\">3.</span> 新的一行以 <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">,</span><span class=\"token template-punctuation string\">`</span></span>、<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token function\">作開始</span> <span class=\"token punctuation\">(</span>需注意執行結果<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a\n<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 這裡 b 一樣會 var 被宣告</span>\n\n遇到以上問題，在前面加入分號也是解決方法， 如<span class=\"token operator\">:</span>\n\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p>需要知道 ASI 的規則是因為 JavaScript 有個叫 ESLint 的風格管理器，<br>而 ESLint 其中一種風格【Standard】就是提倡不加入分號。</p>\n</div>\n","text":"ASI(Automatic Semicolon Insertion)是 JavaScript 的規則，當程式碼沒有加上分號時，會受到 ASI 自動插入分號規則的影響。來看看以下程式碼： function callName() &#123; return '叫我小明'; &#125...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":10,"path":"api/tags/JavaScript.json"}],"toc":"","author":{"name":"tommm2","slug":"blog-author","avatar":"https://i.postimg.cc/nzsgrNDd/new.jpg","link":"/","description":"紀錄學習筆記以及自己成長的過程","socials":{"github":"https://github.com/tommm2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"cakeresume":{"icon":"fab fa-cuttlefish","link":"https://www.cakeresume.com/real-pro"}}}},"mapped":true,"prev_post":{"title":"JavaScript核心(7)-陳述式與表達式","uid":"f2aac153324ba3bfd30225ae950ba730","slug":"JavaScript核心(7)-陳述式與表達式","date":"2021-10-08T08:52:25.000Z","updated":"2021-10-08T09:10:28.366Z","comments":true,"path":"api/articles/JavaScript核心(7)-陳述式與表達式.json","keywords":"前端,技術,網頁開發,前端開發,網頁,JavaScript,CSS,HTML,Vue,Vue.js,前端筆記","cover":"https://i.postimg.cc/tC28h7Zc/javascript.png","text":"Statement 陳述式JavaScript 的語句類型，用於命令執行指定的一系列操作，最大特徵就是不會回傳結果，例如: if-else、for。 Expression 表達式(運算式)又可稱為表達式或運算式，經常透過一些符號結合上下語句並運算及回傳結果。 可以在開方者工具下輸...","link":"","photos":[],"count_time":{"symbolsCount":391,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":10,"path":"api/tags/JavaScript.json"}],"author":{"name":"tommm2","slug":"blog-author","avatar":"https://i.postimg.cc/nzsgrNDd/new.jpg","link":"/","description":"紀錄學習筆記以及自己成長的過程","socials":{"github":"https://github.com/tommm2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"cakeresume":{"icon":"fab fa-cuttlefish","link":"https://www.cakeresume.com/real-pro"}}}},"feature":true},"next_post":{"title":"JavaScript核心(6)-執行緒與同步、非同步","uid":"bdb76982bd96f93dcf660de6d1a44759","slug":"JavaScript核心(6)-執行緒與同步、非同步","date":"2021-10-08T08:41:07.000Z","updated":"2021-10-08T09:07:10.593Z","comments":true,"path":"api/articles/JavaScript核心(6)-執行緒與同步、非同步.json","keywords":"前端,技術,網頁開發,前端開發,網頁,JavaScript,CSS,HTML,Vue,Vue.js,前端筆記","cover":"https://i.postimg.cc/tC28h7Zc/javascript.png","text":"單執行緒與多執行緒(Single-Thread and Mulitple-Thread)JavaScript 是一個單執行緒的程式語言，單執行緒是一個作業系統的運作概念。以下圖為例，小明在早上有三個任務，而這些任務不能同時做，小明必須先吃完早餐，然後打給漂亮阿姨後，最後在去洗盤子...","link":"","photos":[],"count_time":{"symbolsCount":951,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":10,"path":"api/tags/JavaScript.json"}],"author":{"name":"tommm2","slug":"blog-author","avatar":"https://i.postimg.cc/nzsgrNDd/new.jpg","link":"/","description":"紀錄學習筆記以及自己成長的過程","socials":{"github":"https://github.com/tommm2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"cakeresume":{"icon":"fab fa-cuttlefish","link":"https://www.cakeresume.com/real-pro"}}}}}}
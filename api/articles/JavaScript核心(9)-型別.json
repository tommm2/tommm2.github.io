{"title":"JavaScript核心(9)-型別","uid":"81fd55e235ac1d2da0d07a77f95b851b","slug":"JavaScript核心(9)-型別","date":"2021-10-08T08:55:55.000Z","updated":"2021-10-11T06:25:27.240Z","comments":true,"path":"api/articles/JavaScript核心(9)-型別.json","keywords":"前端,技術,網頁開發,前端開發,網頁,JavaScript,CSS,HTML,Vue,Vue.js,前端筆記","cover":"https://i.postimg.cc/tC28h7Zc/javascript.png","content":"<h2 id=\"動態型別\"><a href=\"#動態型別\" class=\"headerlink\" title=\"動態型別\"></a>動態型別</h2><p>JavaScript是弱型別，也能說是動態程式語言。也就是說不必像 C 語言一樣特別宣告變數的型別。程式在執行時會自動轉換並確立型別。</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// a 目前是數字</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a 目前是字串</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// a 目前是布林值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>JavaScript 在轉換型別當中有非常大的陷阱，我們來看看以下程式碼 :</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 執行結果: 1 \"number\"</span>\nnum <span class=\"token operator\">=</span> num <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 執行結果 : 1 \"string\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到 <code>num</code> 印出的第一個結果是 <code>1</code>，然後型別是 <code>number</code>，而第二個印出的結果變成字串的原因是 <code>num</code> 加入了一個空字串，動態轉換了型別，所以 <code>num</code> 會變成字串型別。</p>\n<h2 id=\"原始型別\"><a href=\"#原始型別\" class=\"headerlink\" title=\"原始型別\"></a>原始型別</h2><p>原始型別總共分為七種型別：</p>\n<ul>\n<li>Boolean (布林)</li>\n<li>Null (空值)</li>\n<li>Undefined (未定義)</li>\n<li>Number (數值)</li>\n<li>String (字串)</li>\n<li>BigInt (整數數值)</li>\n<li>Symbol (整數數值)</li>\n</ul>\n<p>這些型別有各自的方法，比如說字串轉大小寫、取得字串長度，或者是數字取絕對值等等，而可以使用這些方法的原因是原始型別具有包裹物件：</p>\n<table>\n<thead>\n<tr>\n<th>型別˙</th>\n<th align=\"center\">包裹物件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Boolean</td>\n<td align=\"center\">new Boolean()</td>\n</tr>\n<tr>\n<td>Null</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>Undefined</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>Number</td>\n<td align=\"center\">new Number()</td>\n</tr>\n<tr>\n<td>String</td>\n<td align=\"center\">new String()</td>\n</tr>\n<tr>\n<td>BigInt</td>\n<td align=\"center\">BigInt()</td>\n</tr>\n<tr>\n<td>Symbol</td>\n<td align=\"center\">Symbol()</td>\n</tr>\n</tbody></table>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>需要注意的是只有 <code>Null</code> 以及 <code>Undefined</code> 沒有包裹物件。</p>\n</div>\n<hr>\n<p>我們可以用 <code>typeof</code> 一一確認變數型別，參考以下範例：</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token string\">'文字'</span><span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nd <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// String, Boolean, Object, Object, undefined</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>而為甚麼 <code>null</code> 印出來的型別會是 <code>Object</code> 呢 ? 這是 JavaScript 長久以來的錯誤，但它也沒辦法修正錯誤，因為有許多網站透過這種錯誤來完成網站應用，如果修正可能會導致網站出錯。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p>可以用 <code>typeof</code> 來檢查一個未宣告的變數，這時會印出 <code>undefined</code>， 這是 <code>typeof</code>  針對 <code>not defined</code> 的保護措施。</p>\n</div>\n<hr>\n<p>接著用以下範例來說明，為甚麼一個字串變數能使用各種操作字串的方法：</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'tom'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// tom, String &#123;\"tom\"&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// object</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>透過開發者工具並且把 <code>String</code> 點開會包含 3 個字串以及 <code>_proto_</code> ，如下圖 ：</p>\n<p><img src=\"https://i.postimg.cc/0jZLYVRc/image.jpg\" alt=\"https://i.postimg.cc/0jZLYVRc/image.jpg\"></p>\n<p><code>_proto_</code> 就是這個包裹物件的原型，方法都藏在裡面。使用原始型別的時候，JavaScript 會自動把包裹物件套用進來，但在宣告原始型別時盡量不要以 <code>var e = new String(a)</code> 這種方式來宣告，這種方法稱為建構式，透過 <code>typeof e</code> 可以看到它目前的型別是”物件”，跟原本操作方式會不同。</p>\n","text":"動態型別JavaScript是弱型別，也能說是動態程式語言。也就是說不必像 C 語言一樣特別宣告變數的型別。程式在執行時會自動轉換並確立型別。 var a = 42; // a 目前是數字 var a = 'hello'; // a 目前是字串 var a = true; // ...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"JavaScript核心","slug":"JavaScript核心","count":15,"path":"api/categories/JavaScript核心.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":15,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8B%95%E6%85%8B%E5%9E%8B%E5%88%A5\"><span class=\"toc-text\">動態型別</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%A7%8B%E5%9E%8B%E5%88%A5\"><span class=\"toc-text\">原始型別</span></a></li></ol>","author":{"name":"tommm2","slug":"blog-author","avatar":"https://i.postimg.cc/nzsgrNDd/new.jpg","link":"/","description":"紀錄學習筆記以及自己成長的過程","socials":{"github":"https://github.com/tommm2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"cakeresume":{"icon":"fab fa-cuttlefish","link":"https://www.cakeresume.com/real-pro"}}}},"mapped":true,"prev_post":{"title":"JavaScript核心(10)-運算子、優先性與相依性","uid":"eabca4b5b506789d245f8d75823a2f80","slug":"JavaScript核心(10)-運算子、優先性與相依性","date":"2021-10-08T09:38:07.000Z","updated":"2021-10-11T06:25:22.068Z","comments":true,"path":"api/articles/JavaScript核心(10)-運算子、優先性與相依性.json","keywords":"前端,技術,網頁開發,前端開發,網頁,JavaScript,CSS,HTML,Vue,Vue.js,前端筆記","cover":"https://i.postimg.cc/tC28h7Zc/javascript.png","text":"運算子JavaScript 具有二元運算子及一元運算子，以及比較特別的(條件)三元運算子。 一元運算子具備一個運算元，一個運算子 運算子 運算元 運算元 運算子 // 例如: x++ 或 ++x 或 typeof x 、 delete x 二元運算子具備兩個運算元，一個在前，一個...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"JavaScript核心","slug":"JavaScript核心","count":15,"path":"api/categories/JavaScript核心.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":15,"path":"api/tags/JavaScript.json"}],"author":{"name":"tommm2","slug":"blog-author","avatar":"https://i.postimg.cc/nzsgrNDd/new.jpg","link":"/","description":"紀錄學習筆記以及自己成長的過程","socials":{"github":"https://github.com/tommm2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"cakeresume":{"icon":"fab fa-cuttlefish","link":"https://www.cakeresume.com/real-pro"}}}}},"next_post":{"title":"JavaScript核心(7)-陳述式與表達式","uid":"f2aac153324ba3bfd30225ae950ba730","slug":"JavaScript核心(7)-陳述式與表達式","date":"2021-10-08T08:52:25.000Z","updated":"2021-10-11T06:25:36.725Z","comments":true,"path":"api/articles/JavaScript核心(7)-陳述式與表達式.json","keywords":"前端,技術,網頁開發,前端開發,網頁,JavaScript,CSS,HTML,Vue,Vue.js,前端筆記","cover":"https://i.postimg.cc/tC28h7Zc/javascript.png","text":"Statement 陳述式JavaScript 的語句類型，用於命令執行指定的一系列操作，最大特徵就是不會回傳結果，例如: if-else、for。 Expression 表達式(運算式)又可稱為表達式或運算式，經常透過一些符號結合上下語句並運算及回傳結果。 可以在開方者工具下輸...","link":"","photos":[],"count_time":{"symbolsCount":391,"symbolsTime":"1 mins."},"categories":[{"name":"JavaScript核心","slug":"JavaScript核心","count":15,"path":"api/categories/JavaScript核心.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":15,"path":"api/tags/JavaScript.json"}],"author":{"name":"tommm2","slug":"blog-author","avatar":"https://i.postimg.cc/nzsgrNDd/new.jpg","link":"/","description":"紀錄學習筆記以及自己成長的過程","socials":{"github":"https://github.com/tommm2","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"cakeresume":{"icon":"fab fa-cuttlefish","link":"https://www.cakeresume.com/real-pro"}}}}}}